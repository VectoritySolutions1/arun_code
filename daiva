@app.callback(
    [Output("ag-grid-table", "rowData"),
     Output("ag-grid-table", "columnDefs")],
    [Input("submit-query-button", "n_clicks"),
     Input("submit-filters-button", "n_clicks"),
     Input("join-submit-button", "n_clicks")],
    [State("query-textarea", "value"),
     State("table-dropdown-filter", "value"),
     State("filter-rows-container", "children"),
     State("table-dropdown-join-11", "value"),
     State("table-dropdown-join-22", "value"),
     State("join-operation-dropdown", "value"),
     State("column-dropdown", "value"),
     State("condition-dropdown", "value"),
     State("column-dropdown-2", "value")],
    prevent_initial_call=True
)
def update_ag_grid_on_submit(query_n_clicks, filter_n_clicks, join_n_clicks,
                             new_query, selected_table, filter_rows,
                             join_table_1, join_table_2, join_operation,
                             join_column_1, join_condition, join_column_2):
    ctx = dash.callback_context
    if not ctx.triggered:
        return dash.no_update, dash.no_update

    trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]

    if trigger_id == "submit-query-button" and new_query:
        print("Query Button Triggered")
        print(new_query)  # Print the new query to the console
        df = p_analytics.update_ag_grid(new_query)
        print(df.head())
        row_data = df.to_dict("records")
        column_defs = [{'field': col, 'sortable': True} for col in df.columns]
        return row_data, column_defs

    elif trigger_id == "submit-filters-button" and selected_table:
        print(88888888888888888888888888888888888888888888888888888888)
        # Construct the query based on the filters
        query = f"SELECT * FROM {selected_table} WHERE "
        conditions = []

        for row in filter_rows:
            row_id = row["props"]["id"]["index"]
            column = row["props"]["children"][0]["props"]["children"]["props"]["value"]
            condition = row["props"]["children"][1]["props"]["children"]["props"]["value"]
            value = row["props"]["children"][2]["props"]["children"]["props"]["value"]
            print(f"Row {row_id}: column={column}, condition={condition}, value={value}")

            if column and condition and value:
                conditions.append(f"{column} {condition} '{value}'")

        print(f"Conditions: {conditions}")
        if conditions:
            query += " AND ".join(conditions)
        else:
            query = f"SELECT * FROM {selected_table}"  # Fallback query if no conditions are provided

        # Execute the query and get the data
        print(f"Constructed Query: {query}")
        df = p_analytics.update_ag_grid(query)  # Replace with your actual query execution function

        row_data = df.to_dict("records")
        column_defs = [{'field': col, 'sortable': True} for col in df.columns]

        return row_data, column_defs

    elif trigger_id == "join-submit-button" and join_table_1 and join_table_2 and join_operation and join_column_1 and join_condition and join_column_2:
        print(99999999999999999999999999999999999999999999999999999999999999)
        # Construct the join query
        query = f"SELECT * FROM {join_table_1} {join_operation} {join_table_2} ON {join_table_1}.{join_column_1} {join_condition} {join_table_2}.{join_column_2}"
        
        print(f"Constructed Join Query: {query}")
        df = p_analytics.update_ag_grid(query)  # Replace with your actual query execution function

        row_data = df.to_dict("records")
        column_defs = [{'field': col, 'sortable': True} for col in df.columns]

        return row_data, column_defs

    return dash.no_update, dash.no_update
